// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protobuf/drawing_share.proto

package grpc_example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DrawingShareClient is the client API for DrawingShare service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrawingShareClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (DrawingShare_ConnectClient, error)
	SendDrawing(ctx context.Context, in *SendDrawingRequest, opts ...grpc.CallOption) (*SendDrawingResponse, error)
	DisConnect(ctx context.Context, in *DisConnectRequest, opts ...grpc.CallOption) (*DisConnectResponse, error)
}

type drawingShareClient struct {
	cc grpc.ClientConnInterface
}

func NewDrawingShareClient(cc grpc.ClientConnInterface) DrawingShareClient {
	return &drawingShareClient{cc}
}

func (c *drawingShareClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (DrawingShare_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &DrawingShare_ServiceDesc.Streams[0], "/drawing_share.DrawingShare/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &drawingShareConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DrawingShare_ConnectClient interface {
	Recv() (*ConnectResponse, error)
	grpc.ClientStream
}

type drawingShareConnectClient struct {
	grpc.ClientStream
}

func (x *drawingShareConnectClient) Recv() (*ConnectResponse, error) {
	m := new(ConnectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drawingShareClient) SendDrawing(ctx context.Context, in *SendDrawingRequest, opts ...grpc.CallOption) (*SendDrawingResponse, error) {
	out := new(SendDrawingResponse)
	err := c.cc.Invoke(ctx, "/drawing_share.DrawingShare/SendDrawing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drawingShareClient) DisConnect(ctx context.Context, in *DisConnectRequest, opts ...grpc.CallOption) (*DisConnectResponse, error) {
	out := new(DisConnectResponse)
	err := c.cc.Invoke(ctx, "/drawing_share.DrawingShare/DisConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrawingShareServer is the server API for DrawingShare service.
// All implementations must embed UnimplementedDrawingShareServer
// for forward compatibility
type DrawingShareServer interface {
	Connect(*ConnectRequest, DrawingShare_ConnectServer) error
	SendDrawing(context.Context, *SendDrawingRequest) (*SendDrawingResponse, error)
	DisConnect(context.Context, *DisConnectRequest) (*DisConnectResponse, error)
	mustEmbedUnimplementedDrawingShareServer()
}

// UnimplementedDrawingShareServer must be embedded to have forward compatible implementations.
type UnimplementedDrawingShareServer struct {
}

func (UnimplementedDrawingShareServer) Connect(*ConnectRequest, DrawingShare_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDrawingShareServer) SendDrawing(context.Context, *SendDrawingRequest) (*SendDrawingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDrawing not implemented")
}
func (UnimplementedDrawingShareServer) DisConnect(context.Context, *DisConnectRequest) (*DisConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisConnect not implemented")
}
func (UnimplementedDrawingShareServer) mustEmbedUnimplementedDrawingShareServer() {}

// UnsafeDrawingShareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrawingShareServer will
// result in compilation errors.
type UnsafeDrawingShareServer interface {
	mustEmbedUnimplementedDrawingShareServer()
}

func RegisterDrawingShareServer(s grpc.ServiceRegistrar, srv DrawingShareServer) {
	s.RegisterService(&DrawingShare_ServiceDesc, srv)
}

func _DrawingShare_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DrawingShareServer).Connect(m, &drawingShareConnectServer{stream})
}

type DrawingShare_ConnectServer interface {
	Send(*ConnectResponse) error
	grpc.ServerStream
}

type drawingShareConnectServer struct {
	grpc.ServerStream
}

func (x *drawingShareConnectServer) Send(m *ConnectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DrawingShare_SendDrawing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDrawingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrawingShareServer).SendDrawing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drawing_share.DrawingShare/SendDrawing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrawingShareServer).SendDrawing(ctx, req.(*SendDrawingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrawingShare_DisConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrawingShareServer).DisConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drawing_share.DrawingShare/DisConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrawingShareServer).DisConnect(ctx, req.(*DisConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DrawingShare_ServiceDesc is the grpc.ServiceDesc for DrawingShare service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DrawingShare_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drawing_share.DrawingShare",
	HandlerType: (*DrawingShareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDrawing",
			Handler:    _DrawingShare_SendDrawing_Handler,
		},
		{
			MethodName: "DisConnect",
			Handler:    _DrawingShare_DisConnect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _DrawingShare_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/drawing_share.proto",
}
