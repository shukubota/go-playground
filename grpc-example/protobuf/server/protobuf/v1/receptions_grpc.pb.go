// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: protobuf/v1/receptions.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReceptionServiceClient is the client API for ReceptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceptionServiceClient interface {
	ReceptionList(ctx context.Context, in *ReceptionListRequest, opts ...grpc.CallOption) (*ReceptionListResponse, error)
}

type receptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceptionServiceClient(cc grpc.ClientConnInterface) ReceptionServiceClient {
	return &receptionServiceClient{cc}
}

func (c *receptionServiceClient) ReceptionList(ctx context.Context, in *ReceptionListRequest, opts ...grpc.CallOption) (*ReceptionListResponse, error) {
	out := new(ReceptionListResponse)
	err := c.cc.Invoke(ctx, "/proto.v1.ReceptionService/ReceptionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceptionServiceServer is the server API for ReceptionService service.
// All implementations must embed UnimplementedReceptionServiceServer
// for forward compatibility
type ReceptionServiceServer interface {
	ReceptionList(context.Context, *ReceptionListRequest) (*ReceptionListResponse, error)
	mustEmbedUnimplementedReceptionServiceServer()
}

// UnimplementedReceptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReceptionServiceServer struct {
}

func (UnimplementedReceptionServiceServer) ReceptionList(context.Context, *ReceptionListRequest) (*ReceptionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceptionList not implemented")
}
func (UnimplementedReceptionServiceServer) mustEmbedUnimplementedReceptionServiceServer() {}

// UnsafeReceptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceptionServiceServer will
// result in compilation errors.
type UnsafeReceptionServiceServer interface {
	mustEmbedUnimplementedReceptionServiceServer()
}

func RegisterReceptionServiceServer(s grpc.ServiceRegistrar, srv ReceptionServiceServer) {
	s.RegisterService(&ReceptionService_ServiceDesc, srv)
}

func _ReceptionService_ReceptionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceptionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceptionServiceServer).ReceptionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.ReceptionService/ReceptionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceptionServiceServer).ReceptionList(ctx, req.(*ReceptionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceptionService_ServiceDesc is the grpc.ServiceDesc for ReceptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.ReceptionService",
	HandlerType: (*ReceptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceptionList",
			Handler:    _ReceptionService_ReceptionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/v1/receptions.proto",
}
