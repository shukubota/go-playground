/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: protobuf/v1/reception.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace proto.v1 {
    export class Patient extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            full_name?: string;
            furigana_name?: string;
            gender?: number;
            birth_year?: string;
            clinical_number?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("full_name" in data && data.full_name != undefined) {
                    this.full_name = data.full_name;
                }
                if ("furigana_name" in data && data.furigana_name != undefined) {
                    this.furigana_name = data.furigana_name;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("birth_year" in data && data.birth_year != undefined) {
                    this.birth_year = data.birth_year;
                }
                if ("clinical_number" in data && data.clinical_number != undefined) {
                    this.clinical_number = data.clinical_number;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get full_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set full_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get furigana_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set furigana_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set gender(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get birth_year() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set birth_year(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get clinical_number() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set clinical_number(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: number;
            full_name?: string;
            furigana_name?: string;
            gender?: number;
            birth_year?: string;
            clinical_number?: string;
        }): Patient {
            const message = new Patient({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.full_name != null) {
                message.full_name = data.full_name;
            }
            if (data.furigana_name != null) {
                message.furigana_name = data.furigana_name;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.birth_year != null) {
                message.birth_year = data.birth_year;
            }
            if (data.clinical_number != null) {
                message.clinical_number = data.clinical_number;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                full_name?: string;
                furigana_name?: string;
                gender?: number;
                birth_year?: string;
                clinical_number?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.full_name != null) {
                data.full_name = this.full_name;
            }
            if (this.furigana_name != null) {
                data.furigana_name = this.furigana_name;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.birth_year != null) {
                data.birth_year = this.birth_year;
            }
            if (this.clinical_number != null) {
                data.clinical_number = this.clinical_number;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.full_name.length)
                writer.writeString(2, this.full_name);
            if (this.furigana_name.length)
                writer.writeString(3, this.furigana_name);
            if (this.gender != 0)
                writer.writeInt32(4, this.gender);
            if (this.birth_year.length)
                writer.writeString(5, this.birth_year);
            if (this.clinical_number.length)
                writer.writeString(6, this.clinical_number);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Patient {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Patient();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.full_name = reader.readString();
                        break;
                    case 3:
                        message.furigana_name = reader.readString();
                        break;
                    case 4:
                        message.gender = reader.readInt32();
                        break;
                    case 5:
                        message.birth_year = reader.readString();
                        break;
                    case 6:
                        message.clinical_number = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Patient {
            return Patient.deserialize(bytes);
        }
    }
    export class Examination extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
        }): Examination {
            const message = new Examination({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Examination {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Examination();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Examination {
            return Examination.deserialize(bytes);
        }
    }
    export class Memo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            content?: string;
        }): Memo {
            const message = new Memo({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                content?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Memo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Memo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Memo {
            return Memo.deserialize(bytes);
        }
    }
    export class Label extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
        }): Label {
            const message = new Label({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Label {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Label();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Label {
            return Label.deserialize(bytes);
        }
    }
    export class Doctor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
        }): Doctor {
            const message = new Doctor({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Doctor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Doctor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Doctor {
            return Doctor.deserialize(bytes);
        }
    }
    export class Reception extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            appointment_time?: string;
            reception_time?: string;
            status?: number;
            patient?: Patient;
            examination?: Examination;
            doctor?: Doctor;
            memo?: Memo;
            labels?: Label[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("appointment_time" in data && data.appointment_time != undefined) {
                    this.appointment_time = data.appointment_time;
                }
                if ("reception_time" in data && data.reception_time != undefined) {
                    this.reception_time = data.reception_time;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("patient" in data && data.patient != undefined) {
                    this.patient = data.patient;
                }
                if ("examination" in data && data.examination != undefined) {
                    this.examination = data.examination;
                }
                if ("doctor" in data && data.doctor != undefined) {
                    this.doctor = data.doctor;
                }
                if ("memo" in data && data.memo != undefined) {
                    this.memo = data.memo;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get appointment_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appointment_time(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get reception_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set reception_time(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get patient() {
            return pb_1.Message.getWrapperField(this, Patient, 5) as Patient;
        }
        set patient(value: Patient) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_patient() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get examination() {
            return pb_1.Message.getWrapperField(this, Examination, 6) as Examination;
        }
        set examination(value: Examination) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_examination() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get doctor() {
            return pb_1.Message.getWrapperField(this, Doctor, 7) as Doctor;
        }
        set doctor(value: Doctor) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_doctor() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get memo() {
            return pb_1.Message.getWrapperField(this, Memo, 8) as Memo;
        }
        set memo(value: Memo) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_memo() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get labels() {
            return pb_1.Message.getRepeatedWrapperField(this, Label, 9) as Label[];
        }
        set labels(value: Label[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        static fromObject(data: {
            id?: number;
            appointment_time?: string;
            reception_time?: string;
            status?: number;
            patient?: ReturnType<typeof Patient.prototype.toObject>;
            examination?: ReturnType<typeof Examination.prototype.toObject>;
            doctor?: ReturnType<typeof Doctor.prototype.toObject>;
            memo?: ReturnType<typeof Memo.prototype.toObject>;
            labels?: ReturnType<typeof Label.prototype.toObject>[];
        }): Reception {
            const message = new Reception({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.appointment_time != null) {
                message.appointment_time = data.appointment_time;
            }
            if (data.reception_time != null) {
                message.reception_time = data.reception_time;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.patient != null) {
                message.patient = Patient.fromObject(data.patient);
            }
            if (data.examination != null) {
                message.examination = Examination.fromObject(data.examination);
            }
            if (data.doctor != null) {
                message.doctor = Doctor.fromObject(data.doctor);
            }
            if (data.memo != null) {
                message.memo = Memo.fromObject(data.memo);
            }
            if (data.labels != null) {
                message.labels = data.labels.map(item => Label.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                appointment_time?: string;
                reception_time?: string;
                status?: number;
                patient?: ReturnType<typeof Patient.prototype.toObject>;
                examination?: ReturnType<typeof Examination.prototype.toObject>;
                doctor?: ReturnType<typeof Doctor.prototype.toObject>;
                memo?: ReturnType<typeof Memo.prototype.toObject>;
                labels?: ReturnType<typeof Label.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.appointment_time != null) {
                data.appointment_time = this.appointment_time;
            }
            if (this.reception_time != null) {
                data.reception_time = this.reception_time;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.patient != null) {
                data.patient = this.patient.toObject();
            }
            if (this.examination != null) {
                data.examination = this.examination.toObject();
            }
            if (this.doctor != null) {
                data.doctor = this.doctor.toObject();
            }
            if (this.memo != null) {
                data.memo = this.memo.toObject();
            }
            if (this.labels != null) {
                data.labels = this.labels.map((item: Label) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.appointment_time.length)
                writer.writeString(2, this.appointment_time);
            if (this.reception_time.length)
                writer.writeString(3, this.reception_time);
            if (this.status != 0)
                writer.writeInt32(4, this.status);
            if (this.has_patient)
                writer.writeMessage(5, this.patient, () => this.patient.serialize(writer));
            if (this.has_examination)
                writer.writeMessage(6, this.examination, () => this.examination.serialize(writer));
            if (this.has_doctor)
                writer.writeMessage(7, this.doctor, () => this.doctor.serialize(writer));
            if (this.has_memo)
                writer.writeMessage(8, this.memo, () => this.memo.serialize(writer));
            if (this.labels.length)
                writer.writeRepeatedMessage(9, this.labels, (item: Label) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Reception {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Reception();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.appointment_time = reader.readString();
                        break;
                    case 3:
                        message.reception_time = reader.readString();
                        break;
                    case 4:
                        message.status = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.patient, () => message.patient = Patient.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.examination, () => message.examination = Examination.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.doctor, () => message.doctor = Doctor.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.memo, () => message.memo = Memo.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.labels, () => pb_1.Message.addToRepeatedWrapperField(message, 9, Label.deserialize(reader), Label));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Reception {
            return Reception.deserialize(bytes);
        }
    }
}
