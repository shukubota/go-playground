/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: protobuf/v1/receptions.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./reception";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace proto.v1 {
    export class ReceptionListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            date?: string;
            assign_to?: number;
            sort_appointment_time?: string;
            sort_reservation_time?: string;
            status?: number;
            page?: number;
            size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("date" in data && data.date != undefined) {
                    this.date = data.date;
                }
                if ("assign_to" in data && data.assign_to != undefined) {
                    this.assign_to = data.assign_to;
                }
                if ("sort_appointment_time" in data && data.sort_appointment_time != undefined) {
                    this.sort_appointment_time = data.sort_appointment_time;
                }
                if ("sort_reservation_time" in data && data.sort_reservation_time != undefined) {
                    this.sort_reservation_time = data.sort_reservation_time;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get date() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set date(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assign_to() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set assign_to(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get sort_appointment_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sort_appointment_time(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sort_reservation_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set sort_reservation_time(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            date?: string;
            assign_to?: number;
            sort_appointment_time?: string;
            sort_reservation_time?: string;
            status?: number;
            page?: number;
            size?: number;
        }): ReceptionListRequest {
            const message = new ReceptionListRequest({});
            if (data.date != null) {
                message.date = data.date;
            }
            if (data.assign_to != null) {
                message.assign_to = data.assign_to;
            }
            if (data.sort_appointment_time != null) {
                message.sort_appointment_time = data.sort_appointment_time;
            }
            if (data.sort_reservation_time != null) {
                message.sort_reservation_time = data.sort_reservation_time;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                date?: string;
                assign_to?: number;
                sort_appointment_time?: string;
                sort_reservation_time?: string;
                status?: number;
                page?: number;
                size?: number;
            } = {};
            if (this.date != null) {
                data.date = this.date;
            }
            if (this.assign_to != null) {
                data.assign_to = this.assign_to;
            }
            if (this.sort_appointment_time != null) {
                data.sort_appointment_time = this.sort_appointment_time;
            }
            if (this.sort_reservation_time != null) {
                data.sort_reservation_time = this.sort_reservation_time;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.date.length)
                writer.writeString(1, this.date);
            if (this.assign_to != 0)
                writer.writeInt32(2, this.assign_to);
            if (this.sort_appointment_time.length)
                writer.writeString(3, this.sort_appointment_time);
            if (this.sort_reservation_time.length)
                writer.writeString(4, this.sort_reservation_time);
            if (this.status != 0)
                writer.writeInt32(5, this.status);
            if (this.page != 0)
                writer.writeInt32(6, this.page);
            if (this.size != 0)
                writer.writeInt32(7, this.size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReceptionListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReceptionListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.date = reader.readString();
                        break;
                    case 2:
                        message.assign_to = reader.readInt32();
                        break;
                    case 3:
                        message.sort_appointment_time = reader.readString();
                        break;
                    case 4:
                        message.sort_reservation_time = reader.readString();
                        break;
                    case 5:
                        message.status = reader.readInt32();
                        break;
                    case 6:
                        message.page = reader.readInt32();
                        break;
                    case 7:
                        message.size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReceptionListRequest {
            return ReceptionListRequest.deserialize(bytes);
        }
    }
    export class ReceptionListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total_page?: number;
            current_page?: number;
            size?: number;
            receptions?: dependency_1.proto.v1.Reception[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total_page" in data && data.total_page != undefined) {
                    this.total_page = data.total_page;
                }
                if ("current_page" in data && data.current_page != undefined) {
                    this.current_page = data.current_page;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("receptions" in data && data.receptions != undefined) {
                    this.receptions = data.receptions;
                }
            }
        }
        get total_page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set total_page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get current_page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set current_page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get receptions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.proto.v1.Reception, 4) as dependency_1.proto.v1.Reception[];
        }
        set receptions(value: dependency_1.proto.v1.Reception[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            total_page?: number;
            current_page?: number;
            size?: number;
            receptions?: ReturnType<typeof dependency_1.proto.v1.Reception.prototype.toObject>[];
        }): ReceptionListResponse {
            const message = new ReceptionListResponse({});
            if (data.total_page != null) {
                message.total_page = data.total_page;
            }
            if (data.current_page != null) {
                message.current_page = data.current_page;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.receptions != null) {
                message.receptions = data.receptions.map(item => dependency_1.proto.v1.Reception.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                total_page?: number;
                current_page?: number;
                size?: number;
                receptions?: ReturnType<typeof dependency_1.proto.v1.Reception.prototype.toObject>[];
            } = {};
            if (this.total_page != null) {
                data.total_page = this.total_page;
            }
            if (this.current_page != null) {
                data.current_page = this.current_page;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.receptions != null) {
                data.receptions = this.receptions.map((item: dependency_1.proto.v1.Reception) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.total_page != 0)
                writer.writeInt32(1, this.total_page);
            if (this.current_page != 0)
                writer.writeInt32(2, this.current_page);
            if (this.size != 0)
                writer.writeInt32(3, this.size);
            if (this.receptions.length)
                writer.writeRepeatedMessage(4, this.receptions, (item: dependency_1.proto.v1.Reception) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReceptionListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReceptionListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.total_page = reader.readInt32();
                        break;
                    case 2:
                        message.current_page = reader.readInt32();
                        break;
                    case 3:
                        message.size = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.receptions, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.proto.v1.Reception.deserialize(reader), dependency_1.proto.v1.Reception));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReceptionListResponse {
            return ReceptionListResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedReceptionServiceService {
        static definition = {
            ReceptionList: {
                path: "/proto.v1.ReceptionService/ReceptionList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReceptionListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReceptionListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReceptionListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReceptionListResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ReceptionList(call: grpc_1.ServerUnaryCall<ReceptionListRequest, ReceptionListResponse>, callback: grpc_1.sendUnaryData<ReceptionListResponse>): void;
    }
    export class ReceptionServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedReceptionServiceService.definition, "ReceptionService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ReceptionList: GrpcUnaryServiceInterface<ReceptionListRequest, ReceptionListResponse> = (message: ReceptionListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReceptionListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReceptionListResponse>, callback?: grpc_1.requestCallback<ReceptionListResponse>): grpc_1.ClientUnaryCall => {
            return super.ReceptionList(message, metadata, options, callback);
        };
    }
}
