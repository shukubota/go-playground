/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: protobuf/drawing_share.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace drawing_share {
    export class ConnectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user?: string;
        }): ConnectRequest {
            const message = new ConnectRequest({});
            if (data.user != null) {
                message.user = data.user;
            }
            return message;
        }
        toObject() {
            const data: {
                user?: string;
            } = {};
            if (this.user != null) {
                data.user = this.user;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user.length)
                writer.writeString(1, this.user);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectRequest {
            return ConnectRequest.deserialize(bytes);
        }
    }
    export class ConnectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: string;
            data?: DotData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, DotData, 2) as DotData;
        }
        set data(value: DotData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            from?: string;
            data?: ReturnType<typeof DotData.prototype.toObject>;
        }): ConnectResponse {
            const message = new ConnectResponse({});
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.data != null) {
                message.data = DotData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                from?: string;
                data?: ReturnType<typeof DotData.prototype.toObject>;
            } = {};
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.from.length)
                writer.writeString(1, this.from);
            if (this.has_data)
                writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.from = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.data, () => message.data = DotData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectResponse {
            return ConnectResponse.deserialize(bytes);
        }
    }
    export class DisConnectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user?: string;
        }): DisConnectRequest {
            const message = new DisConnectRequest({});
            if (data.user != null) {
                message.user = data.user;
            }
            return message;
        }
        toObject() {
            const data: {
                user?: string;
            } = {};
            if (this.user != null) {
                data.user = this.user;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user.length)
                writer.writeString(1, this.user);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisConnectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisConnectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisConnectRequest {
            return DisConnectRequest.deserialize(bytes);
        }
    }
    export class DisConnectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: string;
        }): DisConnectResponse {
            const message = new DisConnectResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisConnectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisConnectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisConnectResponse {
            return DisConnectResponse.deserialize(bytes);
        }
    }
    export class SendDrawingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: DotData;
            from?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
            }
        }
        get data() {
            return pb_1.Message.getWrapperField(this, DotData, 1) as DotData;
        }
        set data(value: DotData) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            data?: ReturnType<typeof DotData.prototype.toObject>;
            from?: string;
        }): SendDrawingRequest {
            const message = new SendDrawingRequest({});
            if (data.data != null) {
                message.data = DotData.fromObject(data.data);
            }
            if (data.from != null) {
                message.from = data.from;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: ReturnType<typeof DotData.prototype.toObject>;
                from?: string;
            } = {};
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.from != null) {
                data.from = this.from;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_data)
                writer.writeMessage(1, this.data, () => this.data.serialize(writer));
            if (this.from.length)
                writer.writeString(2, this.from);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendDrawingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendDrawingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.data, () => message.data = DotData.deserialize(reader));
                        break;
                    case 2:
                        message.from = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendDrawingRequest {
            return SendDrawingRequest.deserialize(bytes);
        }
    }
    export class DotData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
        }): DotData {
            const message = new DotData({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeUint64(1, this.x);
            if (this.y != 0)
                writer.writeUint64(2, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DotData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DotData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readUint64();
                        break;
                    case 2:
                        message.y = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DotData {
            return DotData.deserialize(bytes);
        }
    }
    export class SendDrawingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: string;
        }): SendDrawingResponse {
            const message = new SendDrawingResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendDrawingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendDrawingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendDrawingResponse {
            return SendDrawingResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDrawingShareService {
        static definition = {
            Connect: {
                path: "/drawing_share.DrawingShare/Connect",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: ConnectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ConnectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ConnectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ConnectResponse.deserialize(new Uint8Array(bytes))
            },
            SendDrawing: {
                path: "/drawing_share.DrawingShare/SendDrawing",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SendDrawingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendDrawingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SendDrawingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SendDrawingResponse.deserialize(new Uint8Array(bytes))
            },
            DisConnect: {
                path: "/drawing_share.DrawingShare/DisConnect",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DisConnectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DisConnectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DisConnectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DisConnectResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Connect(call: grpc_1.ServerWritableStream<ConnectRequest, ConnectResponse>): void;
        abstract SendDrawing(call: grpc_1.ServerUnaryCall<SendDrawingRequest, SendDrawingResponse>, callback: grpc_1.sendUnaryData<SendDrawingResponse>): void;
        abstract DisConnect(call: grpc_1.ServerUnaryCall<DisConnectRequest, DisConnectResponse>, callback: grpc_1.sendUnaryData<DisConnectResponse>): void;
    }
    export class DrawingShareClient extends grpc_1.makeGenericClientConstructor(UnimplementedDrawingShareService.definition, "DrawingShare", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Connect: GrpcStreamServiceInterface<ConnectRequest, ConnectResponse> = (message: ConnectRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<ConnectResponse> => {
            return super.Connect(message, metadata, options);
        };
        SendDrawing: GrpcUnaryServiceInterface<SendDrawingRequest, SendDrawingResponse> = (message: SendDrawingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SendDrawingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SendDrawingResponse>, callback?: grpc_1.requestCallback<SendDrawingResponse>): grpc_1.ClientUnaryCall => {
            return super.SendDrawing(message, metadata, options, callback);
        };
        DisConnect: GrpcUnaryServiceInterface<DisConnectRequest, DisConnectResponse> = (message: DisConnectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DisConnectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DisConnectResponse>, callback?: grpc_1.requestCallback<DisConnectResponse>): grpc_1.ClientUnaryCall => {
            return super.DisConnect(message, metadata, options, callback);
        };
    }
}
